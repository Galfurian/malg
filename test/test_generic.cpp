#include "malg/control/control.hpp"
#include "malg/linalg.hpp"
#include "malg/eigen.hpp"
#include "malg/matrix.hpp"
#include "malg/vector.hpp"
#include "malg/io.hpp"

#include <cassert>

//#define GENERATE_TESTS

int test_int()
{
#ifdef GENERATE_TESTS
    auto a = malg::utility::rand_matrix<int>(5, 5, -100, 100);
    auto b = malg::utility::rand_matrix<int>(5, 5, -100, 100);
    std::cout << malg::to_cpp("a", a) << ";\n";
    std::cout << malg::to_cpp("b", b) << ";\n";
    std::cout << malg::to_cpp("sum", a + b) << ";\n";
    std::cout << malg::to_cpp("sub", a - b) << ";\n";
    std::cout << malg::to_cpp("mul", a * b) << ";\n";
    std::cout << malg::to_cpp("div", malg::linalg::div(a, b)) << ";\n";
    std::cout << "\n";
#else
    // Input.
    const malg::Matrix<int> a = {
        { -77, 43, 81, -60, -33 },
        { -95, -40, 14, 41, 13 },
        { 0, 41, 93, -89, -17 },
        { -60, 1, -74, -53, 69 },
        { -9, 10, -89, 30, -72 }
    };
    const malg::Matrix<int> b = {
        { 67, 38, 34, 88, 28 },
        { 0, -12, -12, 42, -69 },
        { 20, -54, 15, -27, -20 },
        { 77, 16, 54, -18, 18 },
        { -8, 93, 88, -40, -9 }
    };
    // Reference.
    const malg::Matrix<int> sum = {
        { -10, 81, 115, 28, -5 },
        { -95, -52, 2, 83, -56 },
        { 20, -13, 108, -116, -37 },
        { 17, 17, -20, -71, 87 },
        { -17, 103, -1, -10, -81 }
    };
    const malg::Matrix<int> sub = {
        { -144, 5, 47, -148, -61 },
        { -95, -28, 26, -1, 82 },
        { -20, 95, 78, -62, 3 },
        { -137, -15, -128, -35, 51 },
        { -1, -83, -177, 70, -63 }
    };
    const malg::Matrix<int> mul = {
        { -7895, -11845, -8063, -4757, -7526 },
        { -3032, -2021, 818, -11676, 441 },
        { -4857, -8519, -5399, 1493, -6138 },
        { -10133, 7273, 48, -5046, -1844 },
        { 503, -1872, -6477, 4371, 2026 }
    };
    const malg::Matrix<double> div = {
        { -0.724101333, 0.959172965, -3.50660292, 3.52737442, -3.30035297 },
        { -3.87515054, 3.01491411, -6.44053984, 7.70150764, -2.09035033 },
        { 0.609014897, 0.368501698, -1.70527853, -0.311900352, -2.16473747 },
        { 1.87805156, 1.93870341, 2.98797968, -0.462939925, 1.27233358 },
        { 2.98660079, -4.03525548, 5.63094744, -3.59205073, 1.89608685 }
    };
    // Set the tollerance, specifically for div.
    feq::tolerance() = 1e-06;
    // Check the operations.
    assert(malg::all((a + b) == sum));
    assert(malg::all((a - b) == sub));
    assert(malg::all((a * b) == mul));
    assert(malg::all(malg::linalg::div(a, b) == div));
#endif
    return 0;
}

int test_double()
{
#ifdef GENERATE_TESTS
    auto a = malg::utility::rand_matrix<double>(5, 5, -100, 100);
    auto b = malg::utility::rand_matrix<double>(5, 5, -100, 100);
    std::cout << malg::to_cpp("a", a) << ";\n";
    std::cout << malg::to_cpp("b", b) << ";\n";
    std::cout << malg::to_cpp("sum", a + b) << ";\n";
    std::cout << malg::to_cpp("sub", a - b) << ";\n";
    std::cout << malg::to_cpp("mul", a * b) << ";\n";
    std::cout << malg::to_cpp("div", malg::linalg::div(a, b)) << ";\n";
    std::cout << "\n";
#else
    // Input.
    const malg::Matrix<double> a = {
        { -37.2013365, -68.6581972, 41.3047901, 39.1891392, -83.7775724 },
        { -29.4343112, 19.2121221, -92.9539817, 79.2170016, 87.7778305 },
        { -17.6058458, -4.69375854, 22.4131617, 67.8548823, -72.9728209 },
        { 82.8826396, -23.414967, -63.2745926, 99.0710991, -39.0158564 },
        { -32.7507545, -20.9186668, -0.269948579, 27.4472885, -97.0661874 }
    };
    const malg::Matrix<double> b = {
        { -37.4315122, -46.8778636, 98.621834, 64.875136, -82.3723058 },
        { -19.5194821, -29.6733099, 27.642446, -66.8425277, 18.3564081 },
        { -56.4430537, -85.474696, 44.795422, 44.2905858, -2.45158714 },
        { 27.0582983, -64.0869579, 11.8315765, 58.6659616, -95.9791052 },
        { -33.592816, 37.7442705, 6.9947062, 90.3429215, 9.45861974 }
    };
    // Reference.
    const malg::Matrix<double> sum = {
        { -74.6328488, -115.536061, 139.926624, 104.064275, -166.149878 },
        { -48.9537934, -10.4611878, -65.3115357, 12.374474, 106.134239 },
        { -74.0488995, -90.1684545, 67.2085837, 112.145468, -75.424408 },
        { 109.940938, -87.501925, -51.4430161, 157.737061, -134.994962 },
        { -66.3435705, 16.8256037, 6.72475762, 117.79021, -87.6075677 }
    };
    const malg::Matrix<double> sub = {
        { 0.230175709, -21.7803337, -57.3170439, -25.6859969, -1.40526653 },
        { -9.91482914, 48.885432, -120.596428, 146.059529, 69.4214224 },
        { 38.8372079, 80.7809375, -22.3822602, 23.5642965, -70.5212337 },
        { 55.8243412, 40.6719909, -75.1061691, 40.4051375, 56.9632487 },
        { 0.84206149, -58.6629372, -7.26465478, -62.8956329, -106.524807 }
    };
    const malg::Matrix<double> mul = {
        { 4276.02224, -5422.91529, -3838.80925, -1264.38308, -2850.97902 },
        { 5168.13944, 6991.27723, -4984.46639, 5266.71917, -3767.79738 },
        { 3772.96607, -8054.07327, -569.653942, -2447.5528, -5893.7473 },
        { 4917.38457, -5603.97532, 5591.64172, 6426.96416, -16979.7172 },
        { 5652.87203, -3243.6204, -4174.47982, -7897.43065, -1238.05296 }
    };
    const malg::Matrix<double> div = {
        { -1.75792991, 7.4526154, -1.77961696, 4.36930452, 5.24532028 },
        { -1.84669495, 1.44407952, 0.432614559, 1.16256939, 2.3043699 },
        { -1.14684653, 5.19297263, -1.67231909, 3.19086747, 4.16458535 },
        { 1.58260119, -9.06219024, 2.47852257, -3.32018408, -5.80381381 },
        { -4.05907923, 15.0937256, -4.35863652, 8.57273315, 10.9560582 }
    };
    // Set the tollerance, specifically for div.
    feq::tolerance() = 1e-06;
    // Check the operations.
    assert(malg::all((a + b) == sum));
    assert(malg::all((a - b) == sub));
    assert(malg::all((a * b) == mul));
    assert(malg::all(malg::linalg::div(a, b) == div));
#endif
    return 0;
}

int test_complex()
{
#ifdef GENERATE_TESTS
    auto a = malg::utility::rand_matrix<std::complex<double>>(5, 5, -100, 100);
    auto b = malg::utility::rand_matrix<std::complex<double>>(5, 5, -100, 100);
    std::cout << malg::to_cpp("a", a) << ";\n";
    std::cout << malg::to_cpp("b", b) << ";\n";
    std::cout << malg::to_cpp("sum", a + b) << ";\n";
    std::cout << malg::to_cpp("sub", a - b) << ";\n";
    std::cout << malg::to_cpp("mul", a * b) << ";\n";
    std::cout << malg::to_cpp("div", malg::linalg::div(a, b)) << ";\n";
    std::cout << "\n";
#else
    using namespace std::complex_literals;
    // Input.
    const malg::Matrix<std::complex<double>> a = {
        { 6.21972047 + 55.6003688i, -62.0717653 - 9.29039483i, -79.2333101 + 25.5526935i, 70.1014075 - 15.4969014i, 32.7315868 + 79.1097553i },
        { 7.51023105 + 3.64680008i, 63.7374363 + 43.92121i, 36.9210945 - 56.4619748i, -20.2259046 + 73.9420527i, 48.0314307 + 22.4845855i },
        { 10.9792993 + 19.9594746i, 79.8537074 + 55.1074495i, 83.2460263 - 63.3195366i, -58.0035035 + 95.0898121i, 98.1701286 - 18.5235781i },
        { -46.0580658 - 92.6997876i, -97.3461191 - 8.6252516i, 87.8804822 - 57.8865619i, 3.50403728 + 47.7014354i, -15.613705 + 24.7798349i },
        { 67.6734711 + 56.103517i, -26.3088772 + 48.460602i, 70.6932588 - 79.7588588i, -85.9500325 + 35.6230139i, -11.8113297 + 78.4160521i }
    };
    const malg::Matrix<std::complex<double>> b = {
        { 37.6463194 + 55.5178134i, -18.4074263 - 65.6354342i, 11.291236 + 19.5497491i, 26.5698575 - 96.6589965i, -31.1807715 - 81.1488153i },
        { 27.0583953 + 15.5557727i, 41.347285 - 49.2771551i, -86.1100143 - 8.4328456i, -91.8965878 + 97.7787111i, -46.1050965 + 47.456248i },
        { 25.6042146 + 53.7801993i, -40.6112622 + 9.19292961i, 2.85852944 + 2.69556217i, 97.6854439 - 0.892334903i, 12.801631 - 12.0367261i },
        { -45.3993398 + 85.3966666i, 74.6956836 - 29.4508223i, 51.8387618 - 51.7090829i, 81.4358985 - 69.3236742i, 58.2171779 - 7.16924139i },
        { -69.3605792 + 48.1518686i, 39.8427618 + 51.2287156i, -27.0086001 + 30.983493i, 90.1640195 - 84.6278121i, -59.2749554 - 68.5078407i }
    };
    // Reference.
    const malg::Matrix<std::complex<double>> sum = {
        { 43.8660398 + 111.118182i, -80.4791916 - 74.9258291i, -67.942074 + 45.1024427i, 96.671265 - 112.155898i, 1.55081528 - 2.03905996i },
        { 34.5686264 + 19.2025728i, 105.084721 - 5.3559451i, -49.1889198 - 64.8948204i, -112.122492 + 171.720764i, 1.92633415 + 69.9408335i },
        { 36.5835139 + 73.7396739i, 39.2424452 + 64.3003792i, 86.1045557 - 60.6239744i, 39.6819404 + 94.1974772i, 110.97176 - 30.5603042i },
        { -91.4574056 - 7.30312099i, -22.6504355 - 38.0760739i, 139.719244 - 109.595645i, 84.9399358 - 21.6222388i, 42.6034729 + 17.6105935i },
        { -1.68710806 + 104.255386i, 13.5338845 + 99.6893176i, 43.6846587 - 48.7753658i, 4.21398695 - 49.0047983i, -71.0862851 + 9.90821134i }
    };
    const malg::Matrix<std::complex<double>> sub = {
        { -31.4265989 + 0.0825553932i, -43.6643391 + 56.3450394i, -90.5245461 + 6.00294437i, 43.5315499 + 81.1620951i, 63.9123582 + 160.258571i },
        { -19.5481643 - 11.9089726i, 22.3901514 + 93.1983651i, 123.031109 - 48.0291292i, 71.6706833 - 23.8366585i, 94.1365272 - 24.9716626i },
        { -14.6249152 - 33.8207247i, 120.46497 + 45.9145199i, 80.3874968 - 66.0150988i, -155.688947 + 95.982147i, 85.3684976 - 6.48685207i },
        { -0.658726072 - 178.096454i, -172.041803 + 20.8255707i, 36.0417204 - 6.177479i, -77.9318612 + 117.02511i, -73.830883 + 31.9490763i },
        { 137.03405 + 7.95164839i, -66.151639 - 2.76811362i, 97.7018589 - 110.742352i, -176.114052 + 120.250826i, 47.4636257 + 146.923893i }
    };
    const malg::Matrix<std::complex<double>> mul = {
        { -15729.3783 + 393.534741i, 5524.72444 + 1083.43283i, 3452.0503 - 3618.4312i, 18715.5456 - 3531.4511i, 14363.4158 - 11811.2754i },
        { -4706.7783 - 1056.76389i, 5349.15112 + 10222.821i, -4065.73103 + 1566.41267i, 3668.84828 + 1404.63678i, -7122.24205 - 1064.22327i },
        { -5258.73983 + 3691.5543i, 7654.7563 + 13694.4559i, -6436.41659 + 6535.30201i, 6721.99659 - 2260.14522i, -14499.1048 - 1752.82647i },
        { 1933.13282 - 8887.39193i, -12948.3454 + 15975.7617i, 12311.3721 + 826.480396i, 12419.5692 - 5272.63418i, 2408.46411 + 2959.91843i },
        { 1970.03643 - 6433.90808i, -8259.55967 + 9426.04534i, -1965.60586 + 1775.14428i, 12776.1178 - 3001.52339i, 2624.64344 - 13744.6046i }
    };
    const malg::Matrix<std::complex<double>> div = {
        { -2.61040517 - 0.51938165i, -0.86673903 - 1.64601849i, 0.103491678 + 0.796748593i, 0.314309467 - 2.28212603i, 1.47281764 - 0.731910495i },
        { 0.546504938 + 0.924958461i, 0.502346129 + 1.28819315i, 0.94023401 - 0.537185686i, -0.280741161 + 1.18529653i, -1.2076058 + 0.0729997121i },
        { 1.15521647 + 2.4762995i, 0.0113777518 + 2.59992251i, 1.62600223 - 0.265827624i, -1.43559827 + 1.79784449i, -2.2968276 - 0.378406349i },
        { 0.477587767 - 2.40854546i, 0.179103912 - 0.638206495i, -0.891307585 + 0.400488878i, 1.53100862 + 0.408404799i, 0.0222926676 + 1.29257084i },
        { -0.223354037 + 0.0842494207i, -0.0380571152 + 1.29062814i, 1.74043017 + 0.253183147i, -0.360988464 + 0.553631548i, -1.07908079 - 0.559970571i }
    };

    // Set the tollerance, specifically for div.
    feq::tolerance() = 1e-06;
    // Check the operations.
    assert(malg::all((a + b) == sum));
    assert(malg::all((a - b) == sub));
    assert(malg::all((a * b) == mul));
    assert(malg::all(malg::linalg::div(a, b) == div));
#endif
    return 0;
}

int test_polyreduce()
{
#ifdef GENERATE_TESTS
    auto a = malg::utility::rand_vector<int>(10, 0, 1);
    auto b = malg::utility::rand_vector<int>(10, 0, 1);
    auto c = malg::utility::rand_vector<int>(10, 0, 1);
    auto d = malg::utility::rand_vector<int>(10, 0, 1);
    auto e = malg::utility::rand_vector<int>(10, 0, 1);
    std::cout << malg::to_cpp("a", a) << ";\n";
    std::cout << malg::to_cpp("b", b) << ";\n";
    std::cout << malg::to_cpp("c", c) << ";\n";
    std::cout << malg::to_cpp("d", d) << ";\n";
    std::cout << malg::to_cpp("e", e) << ";\n";
    std::cout << malg::to_cpp("pr_a", malg::control::polyreduce(a)) << ";\n";
    std::cout << malg::to_cpp("pr_b", malg::control::polyreduce(b)) << ";\n";
    std::cout << malg::to_cpp("pr_c", malg::control::polyreduce(c)) << ";\n";
    std::cout << malg::to_cpp("pr_d", malg::control::polyreduce(d)) << ";\n";
    std::cout << malg::to_cpp("pr_e", malg::control::polyreduce(e)) << ";\n";
    std::cout << "\n";
#else
    // Input.
    malg::Vector<int> a = { 1, 0, 0, 1, 0, 1, 0, 0, 0, 0 };
    malg::Vector<int> b = { 0, 1, 1, 1, 1, 0, 1, 0, 0, 0 };
    malg::Vector<int> c = { 0, 1, 1, 0, 1, 1, 0, 1, 0, 0 };
    malg::Vector<int> d = { 0, 0, 0, 1, 0, 1, 0, 1, 1, 1 };
    malg::Vector<int> e = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 };
    // Reference.
    malg::Vector<int> pr_a = { 1, 0, 0, 1, 0, 1, 0, 0, 0, 0 };
    malg::Vector<int> pr_b = { 1, 1, 1, 1, 0, 1, 0, 0, 0 };
    malg::Vector<int> pr_c = { 1, 1, 0, 1, 1, 0, 1, 0, 0 };
    malg::Vector<int> pr_d = { 1, 0, 1, 0, 1, 1, 1 };
    malg::Vector<int> pr_e = { 1, 0 };
    // Check the operations.
    assert(malg::all(malg::control::polyreduce(a) == pr_a));
    assert(malg::all(malg::control::polyreduce(b) == pr_b));
    assert(malg::all(malg::control::polyreduce(c) == pr_c));
    assert(malg::all(malg::control::polyreduce(d) == pr_d));
    assert(malg::all(malg::control::polyreduce(e) == pr_e));
#endif
    return 0;
}

int test_poly()
{
#ifdef GENERATE_TESTS
    auto a = malg::utility::rand_vector<double>(10, -10, 10);
    auto b = malg::utility::rand_vector<double>(10, -10, 10);
    auto c = malg::utility::rand_vector<double>(10, -10, 10);
    auto d = malg::utility::rand_vector<double>(10, -10, 10);
    auto e = malg::utility::rand_vector<double>(10, -10, 10);
    std::cout << malg::to_cpp("a", a) << ";\n";
    std::cout << malg::to_cpp("b", b) << ";\n";
    std::cout << malg::to_cpp("c", c) << ";\n";
    std::cout << malg::to_cpp("d", d) << ";\n";
    std::cout << malg::to_cpp("e", e) << ";\n";
    std::cout << malg::to_cpp("poly_a", malg::control::poly(a)) << ";\n";
    std::cout << malg::to_cpp("poly_b", malg::control::poly(b)) << ";\n";
    std::cout << malg::to_cpp("poly_c", malg::control::poly(c)) << ";\n";
    std::cout << malg::to_cpp("poly_d", malg::control::poly(d)) << ";\n";
    std::cout << malg::to_cpp("poly_e", malg::control::poly(e)) << ";\n";
    std::cout << "\n";
#else
    // Input.
    malg::Vector<double> a = { -4.31365916, -5.43236374, 8.30901341, -4.1052015, -8.75671849, -8.20968452, -7.9560314, 4.93680757, 9.39615916, -4.92315493 };
    malg::Vector<double> b = { -6.59672341, -0.663223138, 2.65719019, -6.36291406, 9.07896614, 0.975672407, 6.18531446, -5.29307772, -5.14025403, -1.46744895 };
    malg::Vector<double> c = { 2.44049723, -9.49302124, -8.37147845, 1.51190319, -7.40282487, 8.66589357, -5.72460565, 2.24800701, -4.27068812, 6.31589424 };
    malg::Vector<double> d = { 1.18684296, -8.83575517, 9.88988867, 2.2718604, 7.85940986, 2.26749284, -5.22560682, 2.30190354, -4.51284885, 3.30124804 };
    malg::Vector<double> e = { 7.1682439, -8.06318395, -0.528348051, 2.64482488, 4.27461831, 7.59099286, 8.16414622, -5.98537147, 3.02603983, 1.75029028 };
    // Reference.
    malg::Vector<double> poly_a = { 1, 21.0548336, -17.4897007, -3268.17296, -19192.7843, 107667.157, 1353231.96, 2417940.15, -17396408.5, -82999934.9, -104405414 };
    malg::Vector<double> poly_b = { 1, 6.62649812, -112.911725, -902.680926, 2500.57233, 30199.3369, 19059.1166, -210355.545, -212728.833, 195535.603, 161817.207 };
    malg::Vector<double> poly_c = { 1, 14.0804231, -98.0180687, -1916.89923, 887.608435, 78625.4753, 66775.9288, -1145145.79, -234697.692, 6666982.31, -6529736.95 };
    malg::Vector<double> poly_d = { 1, -10.5044355, -101.444433, 1251.43984, 1027.49399, -37680.6611, 74338.4234, 262291.876, -1195069.98, 1627862.7, -752486.363 };
    malg::Vector<double> poly_e = { 1, -20.0422528, 43.7125343, 1560.5739, -11639.3617, -302.944468, 275213.098, -1066030.37, 1436090.15, -187362.574, -678295.446 };
    // Set the tollerance, specifically for div.
    feq::tolerance() = 1e-06;
    // Check the operations.
    assert(malg::all(malg::control::poly(a) == poly_a));
    assert(malg::all(malg::control::poly(b) == poly_b));
    assert(malg::all(malg::control::poly(c) == poly_c));
    assert(malg::all(malg::control::poly(d) == poly_d));
    assert(malg::all(malg::control::poly(e) == poly_e));
#endif
    return 0;
}

int test_expm()
{
#ifdef GENERATE_TESTS
    auto a = malg::utility::rand_matrix<double>(5, 5, -100, 100);
    auto b = malg::utility::rand_matrix<double>(5, 5, -100, 100);
    auto c = malg::utility::rand_matrix<double>(5, 5, -100, 100);
    auto d = malg::utility::rand_matrix<double>(5, 5, -100, 100);
    auto e = malg::utility::rand_matrix<double>(5, 5, -100, 100);
    std::cout << malg::to_cpp("a", a) << ";\n";
    std::cout << malg::to_cpp("b", b) << ";\n";
    std::cout << malg::to_cpp("c", c) << ";\n";
    std::cout << malg::to_cpp("d", d) << ";\n";
    std::cout << malg::to_cpp("e", e) << ";\n";
    std::cout << malg::to_cpp("expm_a", malg::linalg::expm(a)) << ";\n";
    std::cout << malg::to_cpp("expm_b", malg::linalg::expm(b)) << ";\n";
    std::cout << malg::to_cpp("expm_c", malg::linalg::expm(c)) << ";\n";
    std::cout << malg::to_cpp("expm_d", malg::linalg::expm(d)) << ";\n";
    std::cout << malg::to_cpp("expm_e", malg::linalg::expm(e)) << ";\n";
#else
    // Input.
    malg::Matrix<double> a = {
        { -15.5458944, -97.1885676, -2.25545699, 70.1863391, -35.2873173 },
        { 66.4465788, 43.8484354, 12.583171, -79.0772638, 95.624119 },
        { 99.8136885, 59.3016462, 84.9035347, -23.2639528, -50.9771463 },
        { 91.4942282, -22.5984618, 17.8706132, 44.7630693, -9.99790168 },
        { 39.0343824, -19.6871119, 98.6161879, -60.2191987, 98.6344944 }
    };
    malg::Matrix<double> b = {
        { 63.3507647, -39.7977986, -55.8888088, -61.3599192, -64.8363302 },
        { -36.84952, -71.5332789, 46.5774608, -74.3500775, 70.8524849 },
        { -21.2086081, 65.8513081, -53.2621921, 54.9914801, -7.02221337 },
        { 18.1242303, -83.9546014, -35.9837116, 32.0856732, -77.3596723 },
        { -69.7916162, 90.902458, -2.02615437, 70.279005, 85.7506663 }
    };
    malg::Matrix<double> c = {
        { -54.1910383, 67.3419784, -4.97696063, 7.51835372, 70.7248749 },
        { -83.3971181, -90.3452801, -89.8086915, 73.2110995, -4.93238127 },
        { -39.2404358, 83.4662255, 86.2141902, 82.8031647, -82.6533288 },
        { -25.5733975, -50.9251651, 70.8319844, 74.3622488, -8.98154252 },
        { 29.7198651, -47.0061289, 63.3928138, 20.0981107, -56.0546803 }
    };
    malg::Matrix<double> d = {
        { 65.1809585, -42.8504736, 68.1575291, -25.2619994, -71.1127418 },
        { -79.749854, -63.0507856, 58.6389908, 27.6389739, -5.2120999 },
        { -0.49745321, 60.8086088, -53.7952418, -54.9404498, 62.5375388 },
        { 55.0985219, -14.0161005, 96.1509587, -17.6416804, 54.0363257 },
        { 64.5736433, 6.62711579, 12.3644458, -68.3727389, 2.99360322 }
    };
    malg::Matrix<double> e = {
        { -52.1272295, 88.780273, 78.3526637, -13.276907, 34.6016492 },
        { -64.1692363, 31.8109079, -7.50080231, -66.57565, -88.2098535 },
        { 18.360975, -68.0999633, -66.1906277, 57.7654585, 1.02118668 },
        { -84.1868939, -99.0993309, -92.1614526, 66.0547531, -84.7551219 },
        { -2.78259091, -75.5274384, 74.9108197, 20.548016, -24.8396294 }
    };
    // Reference.
    malg::Matrix<double> expm_a = {
        { -6.8641161e+38, -5.28956323e+38, -1.17870565e+39, 8.60190225e+38, -1.64630967e+37 },
        { 1.99255725e+38, 7.7264104e+37, 4.6416759e+37, 8.30193829e+37, -3.95544728e+38 },
        { -6.20626954e+38, -5.01862772e+38, -1.20254272e+39, 9.16562108e+38, -1.98642391e+38 },
        { -9.92990851e+38, -8.77721929e+38, -2.10767045e+39, 1.70844095e+39, -5.69710177e+38 },
        { -3.66179457e+38, -4.0415798e+38, -1.13267554e+39, 1.01542957e+39, -6.89858307e+38 }
    };
    malg::Matrix<double> expm_b = {
        { -2.74079999e+52, 5.73787112e+50, 3.39221923e+51, 3.83171483e+52, 1.26271261e+52 },
        { 5.01839137e+52, -2.03093079e+52, -1.25544954e+52, -4.43370007e+52, -4.64752456e+52 },
        { -2.01144126e+51, 3.35846821e+51, 1.34128045e+51, -1.63442568e+51, 4.94843928e+51 },
        { -7.82244008e+52, 3.57085589e+52, 2.09037888e+52, 6.36785887e+52, 7.73565517e+52 },
        { 4.92769625e+52, -1.13857557e+52, -9.50929294e+51, -5.50080382e+52, -3.52588356e+52 }
    };
    malg::Matrix<double> expm_c = {
        { -2.26319519e+54, 2.8723809e+53, 4.14939661e+54, 5.34457492e+54, -2.99957483e+54 },
        { 1.02862586e+54, -1.30550175e+53, -1.88590745e+54, -2.42911792e+54, 1.3633116e+54 },
        { -1.15267357e+55, 1.46293945e+54, 2.1133395e+55, 2.72205874e+55, -1.52772092e+55 },
        { -1.40615333e+55, 1.78464853e+54, 2.57807542e+55, 3.32065563e+55, -1.86367582e+55 },
        { -6.12971162e+54, 7.77965005e+53, 1.1238361e+55, 1.44754209e+55, -8.12414626e+54 }
    };
    malg::Matrix<double> expm_d = {
        { -536745180, -150592812, -858208588, -108725257, 823064724 },
        { 1.72332308e+09, -111399009, 1.5766801e+09, 264337160, -2.04796303e+09 },
        { 1.13733153e+09, -63466680.6, 1.06047066e+09, 175884570, -1.36163042e+09 },
        { -74309435.1, -111544364, -298521411, -27972724.2, 204606147 },
        { -759985590, 86666024.2, -620935752, -111225953, 865629943 }
    };
    malg::Matrix<double> expm_e = {
        { 1.12298542e+44, 6.60836243e+44, 3.62974711e+44, -6.33814012e+44, -2.44414379e+42 },
        { 6.27078362e+44, 3.69012903e+45, 2.02686147e+45, -3.5392361e+45, -1.36481708e+43 },
        { -2.62626957e+44, -1.54546452e+45, -8.48870718e+44, 1.48226899e+45, 5.71599627e+42 },
        { -6.45505798e+43, -3.79856781e+44, -2.08642318e+44, 3.64324072e+44, 1.40492384e+42 },
        { -5.29652557e+44, -3.11681346e+45, -1.71195886e+45, 2.98936395e+45, 1.15277277e+43 }
    };
    // Set the tollerance, specifically for div.
    feq::tolerance() = 1e-06;
    // Check the operations.
    assert(malg::all(malg::linalg::expm(a) == expm_a));
    assert(malg::all(malg::linalg::expm(b) == expm_b));
    assert(malg::all(malg::linalg::expm(c) == expm_c));
    assert(malg::all(malg::linalg::expm(d) == expm_d));
    assert(malg::all(malg::linalg::expm(e) == expm_e));
#endif
    return 0;
}

int main(int argc, char *argv[])
{
    std::cout << std::setprecision(9) << "\n";
    test_int();
    test_double();
    test_complex();
    test_polyreduce();
    test_poly();
    test_expm();
    return 0;
}
